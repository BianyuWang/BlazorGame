@page "/BattleField"
@using BlazorGame.Shared
@inject HttpClient Http
@inject IStateService StateService
@inject IUnitService UniteService
@inject Radzen.DialogService DialogService

@if (StateService.DisableBtnClick)
{

    <h1>Hey！ Hey！</h1>
    <h2>Fight =! Fetch</h2>
    <h3>Be patient... </h3>
}

@if (StateService.TotalUnits.Count != 0)
{
    <div class="row">
        <div class="col-lg-6 col-md-4 col-sm-12">
            <RadzenCard>
                <h3 class="h5">Your Hero</h3>
                <RadzenDataGrid AllowFiltering="false" RowClick="@RowSelect" AllowPaging="false"
                            AllowSorting="true" Data="@StateService.TotalUnits" TItem="Unit" ColumnWidth="50px"
                            SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedUnits>
                    <Columns>
                        <RadzenDataGridColumn TItem="Unit" Property="Photo" Title="Hero" Sortable="false" Filterable="false">
                            <Template Context="data">
                                <RadzenImage Path="@($"img/{data.Title}.jpg")" style="width: 40px; height: 40px; border-radius: 8px; margin-right: 8px;" />
                                @data.Name
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Unit" Property="HitPoint" Title="HP" />
                        <RadzenDataGridColumn TItem="Unit" Property="Attack" Title="Attack" />
                        <RadzenDataGridColumn TItem="Unit" Property="Defense" Title="Defense" />
                    </Columns>
                </RadzenDataGrid>
            </RadzenCard>
        </div>
        <div class="col-lg-6 col-md-4 col-sm-12">
            <RadzenCard>
                <div class="row">
                    <div class= "col-3"> <h3 class="h5">Com - Monsters</h3></div>
                    <div class = "col-6" > 
                        
                             <RadzenButton Image="img/Com.jpg" Click ="@GenerateMoster" ButtonStyle="ButtonStyle.Secondary">
                            @if (StateService.TotalMonsters.Count() > 0)
                            {
                                <span class="rz-button-text">Re-Summon Com-Monsters</span>
                            }
                            else
                            {
                                  <span class="rz-button-text">Summon Com-Monsters</span>
                            }
                            
                    </RadzenButton>
                        
                    </div>
                   
                       <div class = "col-3" > 
                           @if (StateService.TotalMonsters.Count() > 0)
                            {
                             <RadzenButton Click ="@ClearMosters" ButtonStyle="ButtonStyle.Danger">
                            
                                <span class="rz-button-text">
                                    Clear</span>
                           
                         
                    </RadzenButton>
                        }
                    </div>

                </div>
               
                @if (StateService.IsMonsterGenerated)
                {
                    
                    <RadzenDataGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="false"
                            AllowSorting="true" Data="@StateService.TotalMonsters" TItem="Unit" ColumnWidth="50px"
                            SelectionMode="DataGridSelectionMode.Single" >
                        <Columns>
                            <RadzenDataGridColumn TItem="Unit" Property="Photo" Title="Hero" Sortable="false" Filterable="false">
                                <Template Context="data">
                                    <RadzenImage Path="@($"img/monster{data.Title}.jpg")" style="width: 40px; height: 40px; border-radius: 8px; margin-right: 8px;" />
                                    @data.Name - @data.Title
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Unit" Property="HitPoint" Title="HP" />
                            <RadzenDataGridColumn TItem="Unit" Property="Attack" Title="Attack" />
                            <RadzenDataGridColumn TItem="Unit" Property="Defense" Title="Defense" />
                        </Columns>
                    </RadzenDataGrid>
                }


            </RadzenCard>
        </div>
    </div>



    @if (selectedUnits != null)
    {
        <div class="row my-4 ">
            <div class="col-lg-1 col-md-4 col-sm-12">
                <RadzenImage Path="@($"img/{selectedUnits[0].Title}.jpg")" style="width: 80px; height: 80px; border-radius: 8px; margin-right: 8px;" />
                HP :   @selectedUnits[0].HitPoint
            </div>
            <div class="col-lg-10 col-md-4 col-sm-12">
                <RadzenCard>
                    <h4 class="mb-4">Strength Value</h4>
                    <RadzenSlider Disabled="true" @bind-Value="@value" TValue="int" Min="0" Max="100" class="w-100" />
                </RadzenCard>
            </div>
            <div class="col-lg-1 col-md-4 col-sm-12">
                <RadzenImage Path="@($"img/wizard.jpg")" style="width: 80px; height: 80px; border-radius: 8px; margin-right: 8px;" />
                HP: 80
            </div>
        </div>
    }
}


@code {
    private WeatherForecast[]? forecasts;
    private IList<Unit> selectedUnits { get; set; }
    private int value = 50;
    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        StateService.OnChange += StateHasChanged;

    }

    async Task GenerateMoster()
    {
        if (StateService.TotalMonsters.Count() > 1)
        StateService.TotalMonsters.Clear();
        
        BusyDialog();
        await Task.Delay(1);
        StateService.TotalMonsters  = await UniteService.GeneraterMosterList();
        StateService.IsMonsterGenerated = true;
        DialogService.Close();
    }

  async Task BusyDialog()
    {
        await DialogService.OpenAsync("", ds =>
    @<div>
        <div class="row">
            <div class="col text-center p-5">
                <RadzenImage Path="img/buzy.gif" Style="display: block; width: 200px; margin-bottom: 40px;" />
               @* <b>Loading, please wait...</b>*@
            </div>
        </div>
    </div>
    , new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }


    void RowSelect(DataGridRowMouseEventArgs<Unit> RowSelected)
    {
        var num = ((double)RowSelected.Data.HitPoint / (RowSelected.Data.HitPoint + 80)) * 100;
        value = Convert.ToInt32(Math.Round(num, 0));


    }
    public void ClearMosters()
    {
        StateService.TotalMonsters.Clear();
        StateService.IsMonsterGenerated = false;
    }
    public void Dispose()
    {

        StateService.OnChange -= StateHasChanged;

    }
}


