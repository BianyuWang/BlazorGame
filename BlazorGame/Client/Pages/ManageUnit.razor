@page "/ManageUnit"


@inject IUnitService UnitService
@inject IStateService StateService

@inject Radzen.DialogService DialogService

   @using BlazorGame.Shared.Models

<h3>Manage your Units</h3>

       <RadzenCard>
            <h4 class="mb-4">Hire a hero</h4>
            <div class="row">

                <div class="col-7"> <RadzenDropDownDataGrid TValue="int" AllowClear="true" 
                                        Data=@(unitTypeList) Style="width: 90%" AllowColumnResize="true"
                                        TextProperty="Title" ValueProperty="Id" AllowFiltering= "false"
                                        Change=@(args => OnChange(args))>
                                        <Template>
                                                  Type: @((context as Unit).Title) , Cost : @((context as Unit).Cost)
                                        </Template>
                                    </RadzenDropDownDataGrid>
                                    </div>
                <div class="col-3">     <RadzenButton Icon="check_circle"  Click=@(args => OnClick(@UnitSelected)) ButtonStyle="ButtonStyle.Success" />Hire</div>
            </div>

           
        </RadzenCard>



@if (StateService.TotalUnits != null)
{

        <RadzenDataList WrapItems="true" AllowPaging="true" Data="@StateService.TotalUnits" TItem="Unit" PageSize="10">
                            <Template Context="unit">
                                <RadzenCard Style="max-width:300px;">
                                    <div class="row">
<div class="col-md-7"> <h3 class="h5 unit-title ">@unit.Title.ToUpper()</h3> </div>   
 <div class="col-md-4" style="text-align: right;">
                                            <RadzenButton ButtonStyle="Radzen.ButtonStyle.Danger" 
                                            Icon="close" Size="Radzen.ButtonSize.Small"
                                            Click = "@(arg=>DeleteUnit(unit.Id))"
                                            >
                                            
                                        </RadzenButton>
                                        </div>
                                         </div>   
                <div class="d-flex flex-row">
                    <RadzenImage Path=@($"img/{unit.Title}.jpg") Class="rounded-circle float-left mr-3" Style="width: 100px; height: 100px;" />
                    <div>
                         <div><span>HP :  </span>@unit.HitPoint</div>
                         <div><span>Defense :  </span>@unit.Defense</div>
                          <div><span>Attack :  </span>@unit.Attack</div>                    
                           <div><span>Return Point :  </span>@unit.RefoundCoin</div>
                    </div>
                </div>

                                </RadzenCard>
                            </Template>
                        </RadzenDataList>


}
@code {
    public IList<Unit> unitTypeList;

    public int UnitSelected;
    public Unit unitTobeDelete;
    protected override void OnInitialized()
    {

        unitTypeList = UnitService.GetUnitType();
        UnitSelected = unitTypeList.First().Id;
        StateService.OnChange += StateHasChanged;
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
    }

    void OnChange(object value)
    {
        UnitSelected = (int)value;

    }

    void DeleteUnit(int unitId)
    {
        unitTobeDelete = StateService.TotalUnits.Where(u => u.Id == unitId).First();

        DialogService.Confirm($"Are you sure to delete {unitTobeDelete.Title}? Only half of your fee ({unitTobeDelete.RefoundCoin}) will be refounded?", "Delete Unit", new ConfirmOptions() { OkButtonText = "Ok", CancelButtonText = "No!!" });



    }
    void OnClick(int selectedId)
    {

        //get cost of selected unit
        var cost = unitTypeList.Where(u => u.Id == selectedId).First().Cost;


        var unit =  UnitService.AddUnit(selectedId);
        StateService.UseCoin(cost);
        //  MyUnits =  UnitService.GetMyUnit();
        StateService.AddUnit(unit);


    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        // console.Log("Dialog opened");
    }

    void Close(dynamic result)
    {
        if (result != null && result && unitTobeDelete != null)
        {
            StateService.RefoundCoin(unitTobeDelete.RefoundCoin);
            StateService.DeleteUnit(unitTobeDelete);
            UnitService.DeleteUnit(unitTobeDelete);
        }
        else
        {
            unitTobeDelete = null;
        }
        //  console.Log($"Dialog closed");
    }

    public void Dispose()
    {
           DialogService.OnOpen -= Open;
        DialogService.OnClose -= Close;
        StateService.OnChange -= StateHasChanged;

    }
}
