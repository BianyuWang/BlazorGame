@page "/ManageUnit"
@inject NavigationManager NavigationManager


@inject IUnitService UnitService
@inject IStateService StateService
@inject NotificationService NotificationService
@inject Radzen.DialogService DialogService

@using BlazorGame.Shared.Models

<h3>Manage your Units</h3>

<RadzenCard>
    <h4 class="mb-4">Hire a hero</h4>
    <div class="row">

        <div class="col-7">
            <RadzenDropDownDataGrid TValue="int" AllowClear="true"
                                    Data=@(unitTypeList) Style="width: 90%" AllowColumnResize="true"
                                    TextProperty="Title" ValueProperty="Id" AllowFiltering="false"
                                    Change=@(args => OnChange(args))>
                <Template>
                    Type: @((context as Unit).Title) , Cost : @((int)((context as Unit).Title))
                </Template>
            </RadzenDropDownDataGrid>
        </div>
        <div class="col-5">  
            <RadzenButton Disabled="@StateService.DisableBtnClick" Text="Hire Hero" Icon="add_shopping_cart" Click=@(args => OnClick(@UnitSelected)) ButtonStyle="ButtonStyle.Success" /></div>
    </div>
    <a href=\"https://parser.name/api/\" target ="_blank"></a>
</RadzenCard>

@if (StateService.TotalUnits != null)
{
    <RadzenDataList WrapItems="true" AllowPaging="true" Data="@StateService.TotalUnits" TItem="Unit" PageSize="10">
        <Template Context="unit">
            <RadzenCard Style="max-width:300px;">
                <div class="row">
                    <div class="col-md-11 row"> <h3 class="h5 unit-title ">@unit.Title -- @unit.Name</h3></div>
                    <div class="col-md-1" style="text-align: right;">
                        <RadzenButton ButtonStyle="Radzen.ButtonStyle.Danger"
                                  Icon="close" Size="Radzen.ButtonSize.Small"
                                  Click="@(arg=>DeleteUnit(unit.Id))">

                        </RadzenButton>
                    </div>
                </div>
                <div class="d-flex flex-row">
                    <RadzenImage Path=@($"img/{unit.Title}.jpg") Class="rounded-circle float-left mr-3" Style="width: 100px; height: 100px;" />
                    <div>
                        <div><span>HP :  </span>@unit.HitPoint</div>
                        <div><span>Defense :  </span>@unit.Defense</div>
                        <div><span>Attack :  </span>@unit.Attack</div>
                        <div><span>Return Point :  </span>@unit.RefoundCoin</div>
                    </div>
                </div>

            </RadzenCard>
        </Template>
    </RadzenDataList>
    <br />
    <br />
    @if (StateService.DisableBtnClick)
    {
       <RadzenButton  Text="Fight With Com_Monster" Click = "(()=>BeginFight())" Icon="build" ButtonStyle="ButtonStyle.Danger" />
    }

}
@code {
    public IList<Unit> unitTypeList;

    public int UnitSelected;
    public Unit unitTobeDelete;
    protected override void OnInitialized()
    {

        unitTypeList = UnitService.GetUnitType();
        StateService.OnChange += StateHasChanged;
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
    }

    void OnChange(object value)
    {
        UnitSelected = (int)value;

    }

    async Task BusyDialog()
    {
        await DialogService.OpenAsync("", ds =>
    @<div>
        <div class="row">
            <div class="col text-center p-5">
                <RadzenImage Path="img/buzy.gif" Style="display: block; width: 200px; margin-bottom: 40px;" />
               @* <b>Loading, please wait...</b>*@
            </div>
        </div>
    </div>
    , new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }

    void DeleteUnit(int unitId)
    {
        unitTobeDelete = StateService.TotalUnits.Where(u => u.Id == unitId).First();

        DialogService.Confirm($"Are you sure to delete {unitTobeDelete.Title}? Only half of your fee ({unitTobeDelete.RefoundCoin}) will be refounded?", "Delete Unit", new ConfirmOptions() { OkButtonText = "Ok", CancelButtonText = "No!!" });

    }
    async Task OnClick(int selectedId)
    {
        if (selectedId == 0)

        {
            await DialogService.OpenAsync("Please Select A Unit From Drop List", ds =>
    @<div>
        Click outside to close this Dialog
    </div>
    , new DialogOptions() { CloseDialogOnOverlayClick = true });
        }
        else
        {
            //get cost of selected unit
            var type = unitTypeList.Where(u => u.Id == selectedId).First().Title;

            if (StateService.TotalCoin < (int)type)
            {
                ShowNotification(new NotificationMessage { Style = "position: absolute; left: -1000px;top:-50px", Severity = NotificationSeverity.Error, Summary = "Oops :(", Detail = "Not Enough Lucky Cat Coin", Duration = 4000 });
                return;
            }
            BusyDialog();
            await Task.Delay(1);
            var unit = await UnitService.AddUnit(type);
            StateService.UseCoin((int)type);         
            StateService.AddUnit(unit);
            DialogService.Close();
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }
    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {

    }

    void Close(dynamic result)
    {
        if (result != null && result && unitTobeDelete != null)
        {
            StateService.RefoundCoin(unitTobeDelete.RefoundCoin);
            StateService.DeleteUnit(unitTobeDelete);
            UnitService.DeleteUnit(unitTobeDelete);
        }
        else
        {
            unitTobeDelete = null;
        }

    }
    public void BeginFight()
    {
          NavigationManager.NavigateTo("/" +
            "fetchdata");
    }

    public void Dispose()
    {
        DialogService.OnOpen -= Open;
        DialogService.OnClose -= Close;
        StateService.OnChange -= StateHasChanged;

    }
}
